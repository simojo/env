
"                                ___           ___           ___
"       ___        ___          /__/\         /  /\         /  /\
"      /__/\      /  /\        |  |::\       /  /::\       /  /:/
"      \  \:\    /  /:/        |  |:|:\     /  /:/\:\     /  /:/
"       \  \:\  /__/::\      __|__|:|\:\   /  /:/-/:/    /  /:/  ___
"   ___  \__\:\ \__\/\:\__  /__/::::| \:\ /__/:/ /:/___ /__/:/  /  /\
"  /__/\ |  |:|    \  \:\/\ \  \:\--\__\/ \  \:\/:::::/ \  \:\ /  /:/
"  \  \:\|  |:|     \__\::/  \  \:\        \  \::/----   \  \:\  /:/
"   \  \:\__|:|     /__/:/    \  \:\        \  \:\        \  \:\/:/
"    \__\::::/      \__\/      \  \:\        \  \:\        \  \::/
"        ----                   \__\/         \__\/         \__\/

" must be mapped early.
let mapleader = ';'
let g:mapleader = ';'

" set working dir
cd %:p:h

"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"%%%%%%%%%%%  Plugins  %%%%%%%%%%%%%%%%%%%
"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

" convenience bindings
nmap <Leader>ps :source %<cr>
nmap <Leader>pS :PlugStatus<cr>
nmap <Leader>pc :PlugClean<cr>
nmap <Leader>pu :PlugUpgrade<cr>:PlugUpdate<cr>

" automatic plugin installation
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/vim-plug')

" abbreviations and plugins to automatically complete closing syntaxes.
" generally a good idea to let Vim do the repetitive typing when possible.
" occasionally makes trouble when closing braces; just copy another then.

Plug 'alvan/vim-closetag'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-endwise'
iab <% <% %><esc>F%hi
iab <%= <%= %><esc>F%hi
iab <%# <%# %><esc>F%hi

" indentLine: displays thin vertical lines
Plug 'Yggdroot/indentLine'
let g:indentLine_char='┊'
let g:vim_json_syntax_conceal=0
let g:indentLine_fileTypeExclude = ['text', 'md', 'csv', 'cron']

" abbreviations and plugins to automatically complete closing syntaxes.
" generally a good idea to let Vim do the repetitive typing when possible.
" occasionally makes trouble when closing braces; just copy another then.

Plug 'editorconfig/editorconfig-vim'
Plug 'conradirwin/vim-bracketed-paste'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'godlygeek/tabular'
Plug 'tpope/vim-fugitive'

" toggling of comments across languages, an absolute *must*.
" ;i to toggle comment on line or selected visual block.

Plug 'tpope/vim-commentary'
nmap <silent> <Leader>i gcc
vmap <silent> <Leader>i gc

" highlight hex colors
" ;c to toggle hex highlighting

Plug 'vim-scripts/colorizer'
nmap <silent> <Leader>c :ColorToggle<cr>

" improved gitgutter, an absolute *must*.
" ;sj to jump to the next changed hunk
" ;sk to jump to the previous changed hunk
" signature shows marks in the same column.

Plug 'mhinz/vim-signify'
Plug 'kshenoy/vim-signature'
let g:signify_vcs_list = ['git']
let g:signify_sign_show_count = 0
let g:signify_line_highlight = 0
nmap <silent> <Leader>sj <plug>(signify-next-hunk)
nmap <silent> <Leader>sk <plug>(signify-prev-hunk)

" jumping around more efficiently, an absolute *must*.
" ;l to jump by word to anything on the screen.
" ;j to jump downwards by lines on the screen.
" ;k to jump upwards by lines on the screen.

Plug 'easymotion/vim-easymotion'
let g:EasyMotion_verbose = 0
nmap <silent> <Leader>j <Leader><Leader>j
nmap <silent> <Leader>k <Leader><Leader>k
nmap <silent> <Leader>l <Plug>(easymotion-bd-w)

" tab filters through files, gitignoring if appropriate.
" ;tab filters through ripgrep across the repository files.

Plug 'junegunn/fzf', { 'do': './install --bin' }
Plug 'junegunn/fzf.vim'
let g:fzf_layout = { 'down': '~25%' }
command! -bang -nargs=? -complete=dir Files call
      \ fzf#vim#files(<q-args>, {'sink': 'tabedit'}, <bang>0)
nmap <tab> :Files<cr>
nmap <Leader><tab> :Rg<cr>


" markdown tweaks to improve folding in large documents with nested headers.
" also, disable some absurd nonsensical defaults that that plugin ships with.
" zr: reduces fold level throughout the buffer
" zR: opens all folds
" zm: increases fold level throughout the buffer
" zM: folds everything all the way
" za: open a fold your cursor is on
" zA: open a fold your cursor is on recursively
" zc: close a fold your cursor is on
" zC: close a fold your cursor is on recursively

Plug 'plasticboy/vim-markdown'
let g:vim_markdown_conceal = 0
let g:vim_markdown_new_list_item_indent = 0
au BufEnter *.md setlocal foldexpr=MarkdownLevel()
au BufEnter *.md setlocal foldmethod=expr
function! MarkdownLevel()
  let h = matchstr(getline(v:lnum), '^#\+')
  if empty(h)
    return "="
  else
    return ">" . len(h)
  endif
endfunction

" writing tools
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
let g:limelight_conceal_ctermfg=8
Plug 'reedes/vim-wordy'
Plug 'reedes/vim-litecorrect'
au FileType mkd,markdown,tex,html,text call litecorrect#init()
au FileType mkd,markdown,tex,html,text nmap \ :Goyo<cr>:Limelight<cr>
au FileType mkd,markdown,tex,html,text nmap 0 g0
au FileType mkd,markdown,tex,html,text nmap $ g$
nmap <silent> <Leader>sc :setlocal spell!<cr>

" autocopmletion
" https://github.com/prabirshrestha/vim-lsp/wiki/Servers
" Plug 'prabirshrestha/asyncomplete-buffer.vim'
" Plug 'prabirshrestha/asyncomplete.vim'
" Plug 'prabirshrestha/vim-lsp'
" inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" imap <c-space> <Plug>(asyncomplete_force_refresh)

Plug 'ervandew/supertab'
let g:SuperTabDefaultCompletionType = "context"

" ;d to expand the error details (q to exit).
" ;n to jump to the next error location.
" ;N to jump to the previous error location.

" ale: Check syntax in Vim asynchronously and fix files, with Language Server Protocol (LSP) support
Plug 'w0rp/ale'
nmap <Leader>d :ALEDetail<cr>
nmap <Leader>n :lnext<cr>
nmap <Leader>N :lprev<cr>
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '▸'

" polyglot: syntax highlighting/formatting across nearly every language
Plug 'sheerun/vim-polyglot'

call plug#end()

" general interface groundwork settings
set cursorline number visualbell signcolumn=yes shortmess=aoO

" things should work as expected elsewhere
set mouse=a backspace=eol,start,indent linebreak breakindent

" omnicomplete enable and ignore nonsense
set wildignore+=*.aux,*.out.*.toc
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.jpeg,*.png
set wildignore+=*.avi,*.m4a,*.mp3,*.oga,*.ogg,*.wav,*.webm
set wildignore+=*.eot,*.otf,*.ttf,*.woff,*.woff2
set wildignore+=*.doc,*.pdf
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=*.o,*.obj,*.exe,*.dll,*.jar,*.rbc,*.pyc,*.class
set wildignore+=*.min.*,*-min.*
set wildignore+=*.swp,.lock,.DS_Store,._*
set wildignore+=*generated
set wildignore+=.git/*

" filetype, encoding, backup, undo related
set autoread noswapfile nobackup undolevels=1000 encoding=utf8 ffs=unix

" searching highlighting and sensitivity
set hlsearch incsearch smartcase infercase ignorecase wildmenu

" indentation spaces tabs and whitespace nonsense
set list listchars=tab:\ \ ,trail:␣,extends:»,precedes:«,nbsp:•
set autoindent smartindent copyindent shiftround smarttab
set tabstop=2 shiftwidth=2 softtabstop=2 expandtab

" folding (use zi to toggle 'foldenable')
set nofoldenable foldnestmax=4 foldmethod=indent

" show editing mode among other useful things
set showmode showcmd

" Don't try to be vi compatible
set nocompatible

" Turn on syntax highlighting
syntax on

" Security
set nomodeline

" Show line numbers
set number

" Whitespace
set wrap

" Cursor motion
set scrolloff=5
set backspace=indent,eol,start
set matchpairs+=<:> " use % to jump between pairs
runtime! macros/matchit.vim

" Allow hidden buffers
set hidden

" Rendering
set ttyfast

" Save as root
command! -nargs=0 Sw w !sudo tee % > /dev/null

" statusline

set hidden noruler rulerformat=%6(%=%l%)
set laststatus=2
set statusline=%f
set statusline+=%(\ %{FugitiveHead()}%)
set statusline+=%(\ %R%)
set statusline+=%(\ %M%)
set statusline+=%=
set statusline+=%<
set statusline+=%(\ %{&filetype}%)
set statusline+=%(\ %{&encoding}%)
set statusline+=%(\ %l\:%c%)
set statusline+=%(\ %p%)

"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"%%%%%%%%  Mappings  %%%%%%%%%
"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

" move across editor lines
map j gj
map k gk

" while in tabedit
noremap h gT
noremap l gt

" yank to eol
noremap Y y$

" faster navigation
nmap J 2<C-E>2j
nmap K 2<C-Y>2k

" literally move a line
nmap <C-j> zRddp==
nmap <C-k> zRddkP==

" literally move a visual block
vmap <C-j> zR:m'>+1<CR>gv=gv
vmap <C-k> zR:m'<-2<CR>gv=gv
vnoremap > ><cr>gv
vnoremap < <<cr>gv

" disable arrow keys
nmap <Up> <nop>
nmap <Down> <nop>
nmap <Left> <nop>
nmap <Right> <nop>

" Formatting
map <leader>q gqip

"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"%%%%%%%%%  Colorscheme  %%%%%%%%%%
"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

" ----------------------------
" |%%%%%%%%%| Dark  |  Light |
" ----------------------------
" | Black   |   0   |   8    |
" | Red     |   1   |   9    |
" | Green   |   2   |   10   |
" | Yellow  |   3   |   11   |
" | Blue    |   4   |   12   |
" | Magenta |   5   |   13   |
" | Cyan    |   6   |   14   |
" | White   |   7   |   15   |
" ----------------------------

" setup
syntax enable
set background=dark
if exists("syntax_on")
  syntax reset
endif
syntax sync minlines=256
set synmaxcol=200
hi clear

"%%%%% Vim UI %%%%%
hi! ColorColumn                    ctermfg=none  ctermbg=none  cterm=none
hi! Conceal                        ctermfg=8     ctermbg=none  cterm=none
hi! Cursor                         ctermfg=none  ctermbg=none  cterm=none
hi! CursorLine                     ctermfg=none  ctermbg=none  cterm=none
hi! CursorLineNr                   ctermfg=7     ctermbg=none  cterm=none
hi! DiffAdd                        ctermfg=2     ctermbg=none  cterm=none
hi! DiffChange                     ctermfg=3     ctermbg=none  cterm=none
hi! DiffDelete                     ctermfg=1     ctermbg=none  cterm=none
hi! DiffText                       ctermfg=8     ctermbg=none  cterm=bold
hi! Directory                      ctermfg=12    ctermbg=none  cterm=none
hi! Folded                         ctermfg=7     ctermbg=none  cterm=none
hi! LineNr                         ctermfg=8     ctermbg=none  cterm=none
hi! MatchParen                     ctermfg=7     ctermbg=none  cterm=underline
hi! NonText                        ctermfg=8     ctermbg=none  cterm=none
hi! Pmenu                          ctermfg=8     ctermbg=none  cterm=none
hi! PmenuSBar                      ctermfg=none  ctermbg=none  cterm=none
hi! PmenuSel                       ctermfg=15    ctermbg=none  cterm=none
hi! PmenuThumb                     ctermfg=none  ctermbg=none  cterm=none
hi! SpellBad                       ctermfg=1     ctermbg=none  cterm=underline
hi! SpellCap                       ctermfg=1     ctermbg=none  cterm=underline
hi! SpellLocal                     ctermfg=13    ctermbg=none  cterm=underline
hi! SpellRare                      ctermfg=11    ctermbg=none  cterm=underline
hi! StatusLine                     ctermfg=8     ctermbg=none  cterm=none
hi! StatusLineNC                   ctermfg=8     ctermbg=none  cterm=none
hi! TabLine                        ctermfg=8     ctermbg=none  cterm=bold
hi! TabLineSel                     ctermfg=7     ctermbg=none  cterm=bold
hi! Title                          ctermfg=7     ctermbg=none  cterm=bold
hi! User1                          ctermfg=1     ctermbg=none  cterm=none
hi! User2                          ctermfg=4     ctermbg=none  cterm=none
hi! User3                          ctermfg=2     ctermbg=none  cterm=none
hi! User4                          ctermfg=3     ctermbg=none  cterm=none
hi! User5                          ctermfg=5     ctermbg=none  cterm=none
hi! User6                          ctermfg=6     ctermbg=none  cterm=none
hi! User7                          ctermfg=7     ctermbg=none  cterm=none
hi! User8                          ctermfg=8     ctermbg=none  cterm=none
hi! User9                          ctermfg=15    ctermbg=none  cterm=none
hi! VertSplit                      ctermfg=8     ctermbg=none  cterm=none
hi! Visual                         ctermfg=none  ctermbg=none  cterm=reverse
hi! WildMenu                       ctermfg=15    ctermbg=none  cterm=none

hi! link Search                    Visual
hi! link IncSearch                 Visual
hi! link ModeMsg                   NonText
hi! link VisualNOS                 Visual
hi! link SpellBad                  Error
hi! link SpellLocal                Normal
hi! link PmenuSbar                 Pmenu
hi! link PmenuThumb                Pmenu
hi! link ColorColumn               Normal
hi! link SignColumn                Normal
hi! link FoldColumn                Normal
hi! link VertSplit                 StatusLine
hi! link WarningMsg                Error
hi! link SpecialKey                Comment

hi! link CursorColumn              CursorLine
hi! link FoldColumn                SignColumn
hi! link IncSearch                 Visual
hi! link ModeMsg                   MoreMsg
hi! link MoreMsg                   Title
hi! link Question                  MoreMsg
hi! link Search                    Visual
hi! link SignColumn                LineNr
hi! link SpecialKey                NonText
hi! link TabLineFill               StatusLineNC
hi! link WarningMsg                ErrorMsg

"%%%%% Major %%%%%
hi! Normal                         ctermfg=none  ctermbg=none  cterm=none
hi! Comment                        ctermfg=8     ctermbg=none  cterm=none
hi! Constant                       ctermfg=3     ctermbg=none  cterm=none
hi! Identifier                     ctermfg=14    ctermbg=none  cterm=none
hi! Statement                      ctermfg=2     ctermbg=none  cterm=none
hi! PreProc                        ctermfg=5     ctermbg=none  cterm=none
hi! Type                           ctermfg=4     ctermbg=none  cterm=none
hi! Special                        ctermfg=13    ctermbg=none  cterm=none
hi! Underlined                     ctermfg=4     ctermbg=none  cterm=underline
hi! Ignore                         ctermfg=0     ctermbg=none  cterm=none
hi! Error                          ctermfg=1     ctermbg=none  cterm=underline
hi! Todo                           ctermfg=1     ctermbg=none  cterm=bold,underline
hi! link ErrorMsg                  Error

hi! Delimiter                      ctermfg=7     ctermbg=none  cterm=none
hi! String                         ctermfg=10     ctermbg=none  cterm=none
hi! Keyword                        ctermfg=1     ctermbg=none  cterm=none
hi! Function                       ctermfg=4     ctermbg=none  cterm=none
hi! Number                         ctermfg=10     ctermbg=none  cterm=none
hi! link Operator                  Delimiter

"%%%%% ALE %%%%%
hi! ALEWarning                     ctermfg=3 ctermbg=none cterm=none
hi! ALEInfo                        ctermfg=15 ctermbg=none cterm=none
hi! ALEInfoSign                    ctermfg=15 ctermbg=none cterm=none
hi! link ALEWarningSign            ALEWarning
hi! link ALEStyleWarning           ALEWarning
hi! link ALEStyleWarningSign       ALEWarning

"%%%%% EasyMotion %%%%%
hi! EasyMotionTarget               ctermfg=1 ctermbg=none cterm=none
hi! EasyMotionTarget2First         ctermfg=15 ctermbg=none cterm=none
hi! EasyMotionTarget2Second        ctermfg=15 ctermbg=none cterm=none
hi! link EasyMotionShade           NonText

"%%%%% Diff %%%%%
hi! link diffAdded                 DiffAdd
hi! link diffRemoved               DiffDelete
hi! link diffFile                  PreProc
hi! link diffLine                  Title

"%%%%% Vim help %%%%%
hi! link helpExample               String
hi! link helpHeadline              Title
hi! link helpSectionDelim          Comment
hi! link helpHyperTextEntry        Statement
hi! link helpHyperTextJump         Underlined
hi! link helpURL                   Underlined

"%%%%% Signify %%%%%
hi! link SignifySignAdd            DiffAdd
hi! link SignifySignDelete         DiffDelete
hi! link SignifySignChange         DiffChange
hi! link SignifySignChangeDelete   DiffDelete
